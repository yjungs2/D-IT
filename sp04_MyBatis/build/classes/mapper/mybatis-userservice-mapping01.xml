<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--	
	mybatis-userservice-mapping.xml : SQL 를 갖는 설정화일 (MetaData) 
	- MyBatis Framework 은 XML MetaData를 사용 SQL구문을 관리하며,
	  (SQL은 xml 을 통해 적절히 캡슐화 되어 애플리케이선 의 외부로 분리함)
	- SQL문의 입력(?) / 출력(?)을 매핑한다.  <== 아래의 select element 참조
 -->
 
<!-- SQL definition -->
<mapper namespace="UserMapper01">
	<!-- Application 에서 User.getUserList id 로 아래의 SQL 을 참조 할 수 있다. -->
	 
	 <!-- 입력(?) / 출력(?) 관리의 이해
	 	- 아래의 query 수행 후 결과 resultType attribute 에 선언된 UserVO 객체 Field
	 	  ( property )에 자동연결(?,자동 바인딩)
	 	- SQL/Query 의 별칭(Alias)와 UserVO객체의 Field 의 변수이름이 동일한 것 확인.  
	  -->
	<select id="getUser" parameterType="string" resultType="user">
		SELECT
		user_id AS userId, user_name AS userName, password, age, grade, reg_date AS regData
		FROM users
		WHERE user_id=#{VALUE}
		<!-- Hash 문법...#{}는 getXxx()...#{VALUE}는 단순 파라미터를 받음 -->
	</select>
	
	<select id="findUserId" parameterType="user" resultType="string">
		SELECT user_name
		FROM users
		WHERE user_id=#{userId} AND password=#{password}
	</select>
</mapper>
<!--
단순 파라미터 값을 받는 문법 #{VALUE}
js2e api에서 제공되는 라이브러리 중에서 많이 사용되는 것들은 전부 알리야스(Alias)로 제공되어져 있다.
java.lang.String :: string
java.lang.Byte(클래스 타입), Integer, Float, Double :: byte, int, long, float,double
java.util.Hashmap :: hashmap
java.util.ArrayList :: arraylist
::
byte(키워드) :: _byte
int :: _int
 -->